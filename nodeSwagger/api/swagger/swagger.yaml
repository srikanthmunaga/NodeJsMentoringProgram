swagger: "2.0"
info:
  version: "0.0.1"
  title: NodeJSMP
host: localhost:10010
basePath: /api
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: auth
    description: Auth API
  - name: city
    description: Cities API
  - name: user
    description: User API
  - name: product
    description: Product API
  - name: review
    description: Reviews for selected product
paths:
  /hello:
    x-swagger-router-controller: hello_world
    get:
      description: Returns 'Hello' to the caller
      operationId: hello
      parameters:
        - name: name
          in: query
          description: The name of the person to whom to say hello
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/HelloWorldResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/auth:
    x-swagger-router-controller: auth
    post:
      tags:
        - auth
      description: Simple username/password auth
      operationId: auth
      parameters:
        - in: body
          name: body
          description: User name and password
          schema:
            $ref: "#/definitions/AuthBodySchema"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AuthResponseSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/auth/local:
    x-swagger-router-controller: auth
    post:
      tags:
        - auth
      description: Simple local passport auth
      parameters:
        - in: body
          name: body
          description: User name and password
          schema:
            $ref: "#/definitions/AuthBodySchema"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AuthResponseSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/auth/facebook:
    x-swagger-router-controller: auth
    get:
      tags:
        - auth
      description: Facebook auth
      responses:
        "200":
          description: Success
          schema:
            type: object
            properties: {}
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/auth/google:
    x-swagger-router-controller: auth
    get:
      tags:
        - auth
      description: Google auth
      responses:
        "200":
          description: Success
          schema:
            type: object
            properties: {}
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/auth/github:
    x-swagger-router-controller: auth
    get:
      tags:
        - auth
      description: Github auth
      responses:
        "200":
          description: Success
          schema:
            type: object
            properties: {}
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/random:
    x-swagger-router-controller: cities
    get:
      tags:
        - city
      description: Returns random city from the database
      operationId: getRandomCity
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CitySchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/cities:
    x-swagger-router-controller: cities
    get:
      tags:
        - city
      description: Returns all cities from the database
      operationId: getAllCities
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/CitySchema"

        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - city
      description: Create new city
      operationId: createCity
      parameters:
        - in: body
          name: body
          description: The city data
          schema:
            $ref: "#/definitions/CitySchema"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CitySchema"

        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/cities/{id}:
    x-swagger-router-controller: cities
    delete:
      tags:
        - city
      description: Delete city
      operationId: deleteCity
      parameters:
        - name: id
          in: path
          description: City id to delete
          type: string
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CitySchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - city
      description: Update city with selected id
      operationId: updateCity
      parameters:
        - in: body
          name: body
          description: The city data to update
          required: false
          schema:
            $ref: "#/definitions/CitySchema"
        - name: id
          in: path
          description: The city id to update
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CitySchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/users:
    x-swagger-router-controller: users
    get:
      tags:
        - user
      description: Returns all users from the database
      operationId: getUsers
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/UserSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - user
      description: Create new user
      operationId: createUser
      parameters:
        - in: body
          name: body
          description: The user data
          schema:
            $ref: "#/definitions/UserSchema"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/users/{id}:
    x-swagger-router-controller: users
    delete:
      tags:
        - user
      description: Delete user with selected id
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The user id to delete
          type: string
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/products:
    x-swagger-router-controller: products
    get:
      tags:
        - product
      description: Returns all products
      operationId: getProducts
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/ProductSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - product
      description: Create new product
      operationId: createProduct
      parameters:
        - in: body
          name: body
          description: The product data
          schema:
            $ref: "#/definitions/ProductSchema"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ProductSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/products/{id}:
    x-swagger-router-controller: products
    get:
      tags:
        - product
      description: Returns product with selected id
      operationId: getProduct
      parameters:
        - name: id
          in: path
          description: The product id to return
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ProductSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - product
      description: Delete product with selected id
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: The product id to delete
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ProductSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /api/products/{id}/reviews:
    x-swagger-router-controller: products
    get:
      tags:
        - product
        - review
      description: Returns reviews for product with selected id
      operationId: getReviews
      parameters:
        - name: id
          in: path
          description: The product id to get reviews
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ReviewSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  AuthBodySchema:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
    example:
      username: srikanth
      password: sreekant27
  AuthResponseSchema:
    type: object
    required:
      - username
      - password
      - token
    properties:
      username:
        type: string
      password:
        type: string
      token:
        type: string
    example:
      username: srikanth
      password: sreekanth27
      token: 041bKiVX8ubZphz4hT6oxhhR
  CitySchema:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      country:
        type: string
      capital:
        type: boolean
        default: false
      location:
        $ref: "#/definitions/LocationSchema"
      lastModifiedDate:
        type: string
    example:
      name: Hyderabad
      country: India
      capital: true
  LocationSchema:
    type: object
    properties:
      lat:
        type: number
      long:
        type: number
    example:
      lat: 58.06
      long: 0.04
  UserSchema:
    type: object
    required:
      - username
      - password
      - email
    properties:
      username:
        type: string
      password:
        type: string
      email:
        type: string
      lastModifiedDate:
        type: string
    example:
      username: srikanth
      password: sreekanth27
      email: saeccse27@gmail.com
  ProductSchema:
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: string
      title:
        type: string
      price:
        type: string
      reviews:
        type: string
      lastModifiedDate:
        type: string
    example:
      id: 1
      title: First product
      price: 100
      reviews: "new review"
  ReviewSchema:
    type: object
    properties:
      reviews:
        type: string
    example:
      reviews: the first review
  HelloWorldResponse:
    required:
      - message
    properties:
      message:
        type: string
  ErrorResponse:
    required:
      - code
      - message
    properties:
      code:
        type: string
      message:
        type: string
    example:
      code: 404
      message: Not found
